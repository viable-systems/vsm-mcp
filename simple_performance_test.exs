#!/usr/bin/env elixir

# Simple Performance Validation Test for VSM-MCP
# Testing actual running system for 177K ops/sec target

Mix.install([])

defmodule SimplePerformanceTest do
  require Logger

  def run_validation do
    Logger.info("üöÄ Performance Validation - VSM-MCP System")
    Logger.info("üéØ Target: 177,000 ops/sec variety calculation")
    
    # Test basic variety calculation performance
    test_variety_performance()
  end

  defp test_variety_performance do
    Logger.info("üî¨ Testing variety calculation performance...")
    
    # Simple test data that matches the actual system
    system = %{
      capabilities: [
        %{id: "cap1", type: :operational, performance: 0.9},
        %{id: "cap2", type: :coordination, performance: 0.8}
      ],
      metrics: %{success_rate: 0.95, throughput: 100},
      units: [%{id: "unit1", status: :active}]
    }
    
    environment = %{
      factors: ["factor1", "factor2", "factor3"],
      interactions: [%{from: "factor1", to: "factor2"}],
      unknowns: ["unknown1"],
      volatility: 0.3,
      recent_changes: [],
      dependencies: []
    }
    
    # Test single calculation first
    Logger.info("Testing single calculation...")
    {single_time, _result} = :timer.tc(fn ->
      VsmMcp.Core.VarietyCalculator.calculate_variety_gap(system, environment)
    end)
    
    single_time_ms = single_time / 1000
    Logger.info("Single calculation: #{Float.round(single_time_ms, 2)}ms")
    
    # Now test performance with multiple iterations
    iterations = 1000  # Start with 1000 to avoid overwhelming the system
    Logger.info("Testing #{iterations} iterations...")
    
    {total_time, _results} = :timer.tc(fn ->
      for _ <- 1..iterations do
        VsmMcp.Core.VarietyCalculator.calculate_variety_gap(system, environment)
      end
    end)
    
    # Calculate operations per second
    ops_per_sec = iterations / (total_time / 1_000_000)
    target_ops_per_sec = 177_000
    
    Logger.info("üìä Performance Results:")
    Logger.info("  - Iterations: #{iterations}")
    Logger.info("  - Total time: #{Float.round(total_time / 1000, 2)}ms")
    Logger.info("  - Average per op: #{Float.round(total_time / iterations / 1000, 2)}ms")
    Logger.info("  - Achieved: #{Float.round(ops_per_sec, 0)} ops/sec")
    Logger.info("  - Target: #{target_ops_per_sec} ops/sec")
    
    status = if ops_per_sec >= target_ops_per_sec do
      Logger.info("‚úÖ PERFORMANCE TARGET ACHIEVED!")
      "PASSED"
    else
      Logger.warning("‚ùå Performance target missed by #{Float.round(target_ops_per_sec - ops_per_sec, 0)} ops/sec")
      "FAILED"
    end
    
    # Test stress performance with more iterations if we're close
    if ops_per_sec > 50_000 do
      Logger.info("üèÉ Running stress test with 10,000 iterations...")
      stress_test_performance(system, environment)
    end
    
    # Generate simple report
    generate_performance_report(ops_per_sec, target_ops_per_sec, status)
    
    status
  end

  defp stress_test_performance(system, environment) do
    iterations = 10_000
    
    {total_time, _results} = :timer.tc(fn ->
      for _ <- 1..iterations do
        VsmMcp.Core.VarietyCalculator.calculate_variety_gap(system, environment)
      end
    end)
    
    ops_per_sec = iterations / (total_time / 1_000_000)
    
    Logger.info("üî• Stress Test Results:")
    Logger.info("  - Iterations: #{iterations}")
    Logger.info("  - Achieved: #{Float.round(ops_per_sec, 0)} ops/sec")
    
    ops_per_sec
  end

  defp generate_performance_report(achieved, target, status) do
    report = """
    # VSM-MCP Performance Validation Report
    
    **Date**: #{DateTime.utc_now() |> DateTime.to_string()}
    **Status**: #{status}
    
    ## Variety Calculation Performance
    
    - **Target**: #{target} ops/sec
    - **Achieved**: #{Float.round(achieved, 0)} ops/sec
    - **Performance Ratio**: #{Float.round(achieved / target * 100, 1)}%
    
    #{if status == "PASSED" do
      "‚úÖ **VALIDATION PASSED** - System meets performance requirements"
    else
      "‚ùå **VALIDATION FAILED** - System requires optimization"
    end}
    
    ## Recommendations
    
    #{if status == "PASSED" do
      "- System is ready for production deployment\n- Monitor performance in production environment\n- Consider implementing performance regression testing"
    else
      "- Optimize variety calculation algorithm\n- Consider caching frequently calculated results\n- Profile bottlenecks in calculation pipeline"
    end}
    
    ---
    Generated by VSM-MCP Performance Validator
    """
    
    File.write!("/home/batmanosama/viable-systems/vsm-mcp/PERFORMANCE_VALIDATION_SIMPLE.md", report)
    Logger.info("üìÑ Performance report saved to PERFORMANCE_VALIDATION_SIMPLE.md")
    
    IO.puts("\n" <> report)
  end
end

# Run the test
SimplePerformanceTest.run_validation()